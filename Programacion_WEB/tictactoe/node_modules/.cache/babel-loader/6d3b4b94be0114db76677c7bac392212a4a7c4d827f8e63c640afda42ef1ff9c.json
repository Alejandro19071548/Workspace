{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\workspace\\\\React\\\\tictactoe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n/**\r\n * Componente Square: Representa un botón dentro del tablero del juego.\r\n * @param {string} value - Valor del botón ('X', 'O' o null).\r\n * @param {function} onSquareClick - Función que se ejecuta al hacer clic en el botón.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  // Componente funcional de React para representar un botón\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n/**\r\n * Componente Board: Representa el tablero del juego y gestiona la lógica de juego.\r\n * @param {boolean} xIsNext - Indica si el siguiente turno es de 'X'.\r\n * @param {Array} squares - Estado actual del tablero.\r\n * @param {function} onPlay - Función para actualizar el estado del juego.\r\n */\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay\n}) {\n  /**\r\n   * Maneja el clic en una celda del tablero.\r\n   * @param {number} i - Índice de la celda en la que se hizo clic.\r\n   */\n  function handleClick(i) {\n    // Manejador de eventos para el clic en una celda del tablero\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    nextSquares[i] = xIsNext ? 'X' : 'O';\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares);\n  let status = winner ? `Winner: ${winner}` : `Next player: ${xIsNext ? 'X' : 'O'}`;\n  return (\n    /*#__PURE__*/\n    // Fragmento de React para devolver varios elementos sin un contenedor adicional\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status\",\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: squares[0],\n          onSquareClick: () => handleClick(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[1],\n          onSquareClick: () => handleClick(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[2],\n          onSquareClick: () => handleClick(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: squares[3],\n          onSquareClick: () => handleClick(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[4],\n          onSquareClick: () => handleClick(4)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[5],\n          onSquareClick: () => handleClick(5)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: [/*#__PURE__*/_jsxDEV(Square, {\n          value: squares[6],\n          onSquareClick: () => handleClick(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[7],\n          onSquareClick: () => handleClick(7)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Square, {\n          value: squares[8],\n          onSquareClick: () => handleClick(8)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)\n  );\n}\n\n/**\r\n * Componente Game: Gestiona el estado del historial de movimientos y el flujo general del juego.\r\n */\n_c2 = Board;\nexport default function Game() {\n  _s();\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n\n  /**\r\n   * Maneja la actualización del estado del juego con el siguiente movimiento.\r\n   * @param {Array} nextSquares - Nuevo estado del tablero después del movimiento.\r\n   */\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  /**\r\n   * Permite retroceder a un movimiento anterior.\r\n   * @param {number} nextMove - Índice del movimiento al que se quiere retroceder.\r\n   */\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n  const moves = history.map((squares, move) => {\n    const description = move > 0 ? `Go to move #${move}` : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n/**\r\n * Calcula si hay un ganador en el tablero.\r\n * @param {Array} squares - Estado actual del tablero.\r\n * @returns {string|null} - Retorna 'X' o 'O' si hay un ganador, de lo contrario, retorna null.\r\n */\n_s(Game, \"xZZdy1/aP1agxyjHn6CL01lXnXc=\");\n_c3 = Game;\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let [a, b, c] of lines) {\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","winner","status","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","length","jumpTo","nextMove","moves","map","move","description","_c3","lines","a","b","c","$RefreshReg$"],"sources":["C:/Users/Alex/workspace/React/tictactoe/src/App.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\n/**\r\n * Componente Square: Representa un botón dentro del tablero del juego.\r\n * @param {string} value - Valor del botón ('X', 'O' o null).\r\n * @param {function} onSquareClick - Función que se ejecuta al hacer clic en el botón.\r\n */\r\nfunction Square({ value, onSquareClick }) { // Componente funcional de React para representar un botón\r\n  return (\r\n    <button className=\"square\" onClick={onSquareClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\n/**\r\n * Componente Board: Representa el tablero del juego y gestiona la lógica de juego.\r\n * @param {boolean} xIsNext - Indica si el siguiente turno es de 'X'.\r\n * @param {Array} squares - Estado actual del tablero.\r\n * @param {function} onPlay - Función para actualizar el estado del juego.\r\n */\r\nfunction Board({ xIsNext, squares, onPlay }) {\r\n  /**\r\n   * Maneja el clic en una celda del tablero.\r\n   * @param {number} i - Índice de la celda en la que se hizo clic.\r\n   */\r\n  function handleClick(i) { // Manejador de eventos para el clic en una celda del tablero\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    const nextSquares = squares.slice();\r\n    nextSquares[i] = xIsNext ? 'X' : 'O';\r\n    onPlay(nextSquares);\r\n  }\r\n\r\n  const winner = calculateWinner(squares);\r\n  let status = winner ? `Winner: ${winner}` : `Next player: ${xIsNext ? 'X' : 'O'}`;\r\n\r\n  return ( // Fragmento de React para devolver varios elementos sin un contenedor adicional\r\n    <>\r\n      <div className=\"status\">{status}</div> \r\n      <div className=\"board-row\">\r\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\r\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\r\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\r\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\r\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\r\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\r\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/**\r\n * Componente Game: Gestiona el estado del historial de movimientos y el flujo general del juego.\r\n */\r\nexport default function Game() {\r\n  const [history, setHistory] = useState([Array(9).fill(null)]);\r\n  const [currentMove, setCurrentMove] = useState(0);\r\n  const xIsNext = currentMove % 2 === 0;\r\n  const currentSquares = history[currentMove];\r\n\r\n  /**\r\n   * Maneja la actualización del estado del juego con el siguiente movimiento.\r\n   * @param {Array} nextSquares - Nuevo estado del tablero después del movimiento.\r\n   */\r\n  function handlePlay(nextSquares) {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\r\n    setHistory(nextHistory);\r\n    setCurrentMove(nextHistory.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Permite retroceder a un movimiento anterior.\r\n   * @param {number} nextMove - Índice del movimiento al que se quiere retroceder.\r\n   */\r\n  function jumpTo(nextMove) {\r\n    setCurrentMove(nextMove);\r\n  }\r\n\r\n  const moves = history.map((squares, move) => {\r\n    const description = move > 0 ? `Go to move #${move}` : 'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button onClick={() => jumpTo(move)}>{description}</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Calcula si hay un ganador en el tablero.\r\n * @param {Array} squares - Estado actual del tablero.\r\n * @returns {string|null} - Retorna 'X' o 'O' si hay un ganador, de lo contrario, retorna null.\r\n */\r\nfunction calculateWinner(squares) { \r\n  const lines = [\r\n    [0, 1, 2],  \r\n    [3, 4, 5], \r\n    [6, 7, 8],\r\n    [0, 3, 6], \r\n    [1, 4, 7], \r\n    [2, 5, 8],\r\n    [0, 4, 8], \r\n    [2, 4, 6]\r\n  ];\r\n  for (let [a, b, c] of lines) {\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAKA,SAASC,MAAMA,CAAC;EAAEC,KAAK;EAAEC;AAAc,CAAC,EAAE;EAAE;EAC1C,oBACEL,OAAA;IAAQM,SAAS,EAAC,QAAQ;IAACC,OAAO,EAAEF,aAAc;IAAAG,QAAA,EAC/CJ;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AALAC,EAAA,GARSV,MAAM;AAcf,SAASW,KAAKA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAC3C;AACF;AACA;AACA;EACE,SAASC,WAAWA,CAACC,CAAC,EAAE;IAAE;IACxB,IAAIC,eAAe,CAACJ,OAAO,CAAC,IAAIA,OAAO,CAACG,CAAC,CAAC,EAAE;MAC1C;IACF;IACA,MAAME,WAAW,GAAGL,OAAO,CAACM,KAAK,CAAC,CAAC;IACnCD,WAAW,CAACF,CAAC,CAAC,GAAGJ,OAAO,GAAG,GAAG,GAAG,GAAG;IACpCE,MAAM,CAACI,WAAW,CAAC;EACrB;EAEA,MAAME,MAAM,GAAGH,eAAe,CAACJ,OAAO,CAAC;EACvC,IAAIQ,MAAM,GAAGD,MAAM,GAAG,WAAWA,MAAM,EAAE,GAAG,gBAAgBR,OAAO,GAAG,GAAG,GAAG,GAAG,EAAE;EAEjF;IAAA;IAAS;IACPf,OAAA,CAAAE,SAAA;MAAAM,QAAA,gBACER,OAAA;QAAKM,SAAS,EAAC,QAAQ;QAAAE,QAAA,EAAEgB;MAAM;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACtCZ,OAAA;QAAKM,SAAS,EAAC,WAAW;QAAAE,QAAA,gBACxBR,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEZ,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEZ,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC,eACNZ,OAAA;QAAKM,SAAS,EAAC,WAAW;QAAAE,QAAA,gBACxBR,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEZ,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEZ,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC,eACNZ,OAAA;QAAKM,SAAS,EAAC,WAAW;QAAAE,QAAA,gBACxBR,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEZ,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClEZ,OAAA,CAACG,MAAM;UAACC,KAAK,EAAEY,OAAO,CAAC,CAAC,CAAE;UAACX,aAAa,EAAEA,CAAA,KAAMa,WAAW,CAAC,CAAC;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC;IAAA,eACN;EAAC;AAEP;;AAEA;AACA;AACA;AAFAa,GAAA,GAvCSX,KAAK;AA0Cd,eAAe,SAASY,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG/B,QAAQ,CAAC,CAACgC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMiB,OAAO,GAAGiB,WAAW,GAAG,CAAC,KAAK,CAAC;EACrC,MAAME,cAAc,GAAGN,OAAO,CAACI,WAAW,CAAC;;EAE3C;AACF;AACA;AACA;EACE,SAASG,UAAUA,CAACd,WAAW,EAAE;IAC/B,MAAMe,WAAW,GAAG,CAAC,GAAGR,OAAO,CAACN,KAAK,CAAC,CAAC,EAAEU,WAAW,GAAG,CAAC,CAAC,EAAEX,WAAW,CAAC;IACvEQ,UAAU,CAACO,WAAW,CAAC;IACvBH,cAAc,CAACG,WAAW,CAACC,MAAM,GAAG,CAAC,CAAC;EACxC;;EAEA;AACF;AACA;AACA;EACE,SAASC,MAAMA,CAACC,QAAQ,EAAE;IACxBN,cAAc,CAACM,QAAQ,CAAC;EAC1B;EAEA,MAAMC,KAAK,GAAGZ,OAAO,CAACa,GAAG,CAAC,CAACzB,OAAO,EAAE0B,IAAI,KAAK;IAC3C,MAAMC,WAAW,GAAGD,IAAI,GAAG,CAAC,GAAG,eAAeA,IAAI,EAAE,GAAG,kBAAkB;IACzE,oBACE1C,OAAA;MAAAQ,QAAA,eACER,OAAA;QAAQO,OAAO,EAAEA,CAAA,KAAM+B,MAAM,CAACI,IAAI,CAAE;QAAAlC,QAAA,EAAEmC;MAAW;QAAAlC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC,GADpD8B,IAAI;MAAAjC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAET,CAAC;EAET,CAAC,CAAC;EAEF,oBACEZ,OAAA;IAAKM,SAAS,EAAC,MAAM;IAAAE,QAAA,gBACnBR,OAAA;MAAKM,SAAS,EAAC,YAAY;MAAAE,QAAA,eACzBR,OAAA,CAACc,KAAK;QAACC,OAAO,EAAEA,OAAQ;QAACC,OAAO,EAAEkB,cAAe;QAACjB,MAAM,EAAEkB;MAAW;QAAA1B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,eACNZ,OAAA;MAAKM,SAAS,EAAC,WAAW;MAAAE,QAAA,eACxBR,OAAA;QAAAQ,QAAA,EAAKgC;MAAK;QAAA/B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AAJAe,EAAA,CA7CwBD,IAAI;AAAAkB,GAAA,GAAJlB,IAAI;AAkD5B,SAASN,eAAeA,CAACJ,OAAO,EAAE;EAChC,MAAM6B,KAAK,GAAG,CACZ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EACD,KAAK,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,IAAIH,KAAK,EAAE;IAC3B,IAAI7B,OAAO,CAAC8B,CAAC,CAAC,IAAI9B,OAAO,CAAC8B,CAAC,CAAC,KAAK9B,OAAO,CAAC+B,CAAC,CAAC,IAAI/B,OAAO,CAAC8B,CAAC,CAAC,KAAK9B,OAAO,CAACgC,CAAC,CAAC,EAAE;MACxE,OAAOhC,OAAO,CAAC8B,CAAC,CAAC;IACnB;EACF;EACA,OAAO,IAAI;AACb;AAAC,IAAAjC,EAAA,EAAAY,GAAA,EAAAmB,GAAA;AAAAK,YAAA,CAAApC,EAAA;AAAAoC,YAAA,CAAAxB,GAAA;AAAAwB,YAAA,CAAAL,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}